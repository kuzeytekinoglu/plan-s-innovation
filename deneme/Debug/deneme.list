
deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e0c  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe0  08002fe0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fe0  08002fe0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fe0  08002fe0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002ff4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002ff4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000849a  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018cc  00000000  00000000  000284d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00029da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018966  00000000  00000000  0002b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ebb  00000000  00000000  00043d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c98a  00000000  00000000  0004cbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9583  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f94  00000000  00000000  000e95d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08002f2c 	.word	0x08002f2c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08002f2c 	.word	0x08002f2c

08000178 <__aeabi_dmul>:
 8000178:	b570      	push	{r4, r5, r6, lr}
 800017a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800017e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000182:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000186:	bf1d      	ittte	ne
 8000188:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800018c:	ea94 0f0c 	teqne	r4, ip
 8000190:	ea95 0f0c 	teqne	r5, ip
 8000194:	f000 f8de 	bleq	8000354 <__aeabi_dmul+0x1dc>
 8000198:	442c      	add	r4, r5
 800019a:	ea81 0603 	eor.w	r6, r1, r3
 800019e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001aa:	bf18      	it	ne
 80001ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b8:	d038      	beq.n	800022c <__aeabi_dmul+0xb4>
 80001ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80001be:	f04f 0500 	mov.w	r5, #0
 80001c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ce:	f04f 0600 	mov.w	r6, #0
 80001d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001d6:	f09c 0f00 	teq	ip, #0
 80001da:	bf18      	it	ne
 80001dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001ec:	d204      	bcs.n	80001f8 <__aeabi_dmul+0x80>
 80001ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001f2:	416d      	adcs	r5, r5
 80001f4:	eb46 0606 	adc.w	r6, r6, r6
 80001f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000200:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000204:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000208:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800020c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000210:	bf88      	it	hi
 8000212:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000216:	d81e      	bhi.n	8000256 <__aeabi_dmul+0xde>
 8000218:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800021c:	bf08      	it	eq
 800021e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000222:	f150 0000 	adcs.w	r0, r0, #0
 8000226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800022a:	bd70      	pop	{r4, r5, r6, pc}
 800022c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000230:	ea46 0101 	orr.w	r1, r6, r1
 8000234:	ea40 0002 	orr.w	r0, r0, r2
 8000238:	ea81 0103 	eor.w	r1, r1, r3
 800023c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000240:	bfc2      	ittt	gt
 8000242:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000246:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800024a:	bd70      	popgt	{r4, r5, r6, pc}
 800024c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000250:	f04f 0e00 	mov.w	lr, #0
 8000254:	3c01      	subs	r4, #1
 8000256:	f300 80ab 	bgt.w	80003b0 <__aeabi_dmul+0x238>
 800025a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800025e:	bfde      	ittt	le
 8000260:	2000      	movle	r0, #0
 8000262:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000266:	bd70      	pople	{r4, r5, r6, pc}
 8000268:	f1c4 0400 	rsb	r4, r4, #0
 800026c:	3c20      	subs	r4, #32
 800026e:	da35      	bge.n	80002dc <__aeabi_dmul+0x164>
 8000270:	340c      	adds	r4, #12
 8000272:	dc1b      	bgt.n	80002ac <__aeabi_dmul+0x134>
 8000274:	f104 0414 	add.w	r4, r4, #20
 8000278:	f1c4 0520 	rsb	r5, r4, #32
 800027c:	fa00 f305 	lsl.w	r3, r0, r5
 8000280:	fa20 f004 	lsr.w	r0, r0, r4
 8000284:	fa01 f205 	lsl.w	r2, r1, r5
 8000288:	ea40 0002 	orr.w	r0, r0, r2
 800028c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000290:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000294:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000298:	fa21 f604 	lsr.w	r6, r1, r4
 800029c:	eb42 0106 	adc.w	r1, r2, r6
 80002a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a4:	bf08      	it	eq
 80002a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	f1c4 040c 	rsb	r4, r4, #12
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f304 	lsl.w	r3, r0, r4
 80002b8:	fa20 f005 	lsr.w	r0, r0, r5
 80002bc:	fa01 f204 	lsl.w	r2, r1, r4
 80002c0:	ea40 0002 	orr.w	r0, r0, r2
 80002c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d4:	bf08      	it	eq
 80002d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f1c4 0520 	rsb	r5, r4, #32
 80002e0:	fa00 f205 	lsl.w	r2, r0, r5
 80002e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e8:	fa20 f304 	lsr.w	r3, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea43 0302 	orr.w	r3, r3, r2
 80002f4:	fa21 f004 	lsr.w	r0, r1, r4
 80002f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000300:	ea20 0002 	bic.w	r0, r0, r2
 8000304:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f094 0f00 	teq	r4, #0
 8000318:	d10f      	bne.n	800033a <__aeabi_dmul+0x1c2>
 800031a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800031e:	0040      	lsls	r0, r0, #1
 8000320:	eb41 0101 	adc.w	r1, r1, r1
 8000324:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000328:	bf08      	it	eq
 800032a:	3c01      	subeq	r4, #1
 800032c:	d0f7      	beq.n	800031e <__aeabi_dmul+0x1a6>
 800032e:	ea41 0106 	orr.w	r1, r1, r6
 8000332:	f095 0f00 	teq	r5, #0
 8000336:	bf18      	it	ne
 8000338:	4770      	bxne	lr
 800033a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800033e:	0052      	lsls	r2, r2, #1
 8000340:	eb43 0303 	adc.w	r3, r3, r3
 8000344:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000348:	bf08      	it	eq
 800034a:	3d01      	subeq	r5, #1
 800034c:	d0f7      	beq.n	800033e <__aeabi_dmul+0x1c6>
 800034e:	ea43 0306 	orr.w	r3, r3, r6
 8000352:	4770      	bx	lr
 8000354:	ea94 0f0c 	teq	r4, ip
 8000358:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800035c:	bf18      	it	ne
 800035e:	ea95 0f0c 	teqne	r5, ip
 8000362:	d00c      	beq.n	800037e <__aeabi_dmul+0x206>
 8000364:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000368:	bf18      	it	ne
 800036a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800036e:	d1d1      	bne.n	8000314 <__aeabi_dmul+0x19c>
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	f04f 0000 	mov.w	r0, #0
 800037c:	bd70      	pop	{r4, r5, r6, pc}
 800037e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000382:	bf06      	itte	eq
 8000384:	4610      	moveq	r0, r2
 8000386:	4619      	moveq	r1, r3
 8000388:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800038c:	d019      	beq.n	80003c2 <__aeabi_dmul+0x24a>
 800038e:	ea94 0f0c 	teq	r4, ip
 8000392:	d102      	bne.n	800039a <__aeabi_dmul+0x222>
 8000394:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000398:	d113      	bne.n	80003c2 <__aeabi_dmul+0x24a>
 800039a:	ea95 0f0c 	teq	r5, ip
 800039e:	d105      	bne.n	80003ac <__aeabi_dmul+0x234>
 80003a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003a4:	bf1c      	itt	ne
 80003a6:	4610      	movne	r0, r2
 80003a8:	4619      	movne	r1, r3
 80003aa:	d10a      	bne.n	80003c2 <__aeabi_dmul+0x24a>
 80003ac:	ea81 0103 	eor.w	r1, r1, r3
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003bc:	f04f 0000 	mov.w	r0, #0
 80003c0:	bd70      	pop	{r4, r5, r6, pc}
 80003c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003ca:	bd70      	pop	{r4, r5, r6, pc}

080003cc <__aeabi_drsub>:
 80003cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	e002      	b.n	80003d8 <__adddf3>
 80003d2:	bf00      	nop

080003d4 <__aeabi_dsub>:
 80003d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d8 <__adddf3>:
 80003d8:	b530      	push	{r4, r5, lr}
 80003da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	bf1f      	itttt	ne
 80003ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fe:	f000 80e2 	beq.w	80005c6 <__adddf3+0x1ee>
 8000402:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000406:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800040a:	bfb8      	it	lt
 800040c:	426d      	neglt	r5, r5
 800040e:	dd0c      	ble.n	800042a <__adddf3+0x52>
 8000410:	442c      	add	r4, r5
 8000412:	ea80 0202 	eor.w	r2, r0, r2
 8000416:	ea81 0303 	eor.w	r3, r1, r3
 800041a:	ea82 0000 	eor.w	r0, r2, r0
 800041e:	ea83 0101 	eor.w	r1, r3, r1
 8000422:	ea80 0202 	eor.w	r2, r0, r2
 8000426:	ea81 0303 	eor.w	r3, r1, r3
 800042a:	2d36      	cmp	r5, #54	; 0x36
 800042c:	bf88      	it	hi
 800042e:	bd30      	pophi	{r4, r5, pc}
 8000430:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000434:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000438:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800043c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000440:	d002      	beq.n	8000448 <__adddf3+0x70>
 8000442:	4240      	negs	r0, r0
 8000444:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000448:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800044c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000450:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x84>
 8000456:	4252      	negs	r2, r2
 8000458:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800045c:	ea94 0f05 	teq	r4, r5
 8000460:	f000 80a7 	beq.w	80005b2 <__adddf3+0x1da>
 8000464:	f1a4 0401 	sub.w	r4, r4, #1
 8000468:	f1d5 0e20 	rsbs	lr, r5, #32
 800046c:	db0d      	blt.n	800048a <__adddf3+0xb2>
 800046e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000472:	fa22 f205 	lsr.w	r2, r2, r5
 8000476:	1880      	adds	r0, r0, r2
 8000478:	f141 0100 	adc.w	r1, r1, #0
 800047c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000480:	1880      	adds	r0, r0, r2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	4159      	adcs	r1, r3
 8000488:	e00e      	b.n	80004a8 <__adddf3+0xd0>
 800048a:	f1a5 0520 	sub.w	r5, r5, #32
 800048e:	f10e 0e20 	add.w	lr, lr, #32
 8000492:	2a01      	cmp	r2, #1
 8000494:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000498:	bf28      	it	cs
 800049a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800049e:	fa43 f305 	asr.w	r3, r3, r5
 80004a2:	18c0      	adds	r0, r0, r3
 80004a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ac:	d507      	bpl.n	80004be <__adddf3+0xe6>
 80004ae:	f04f 0e00 	mov.w	lr, #0
 80004b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80004b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80004be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004c2:	d31b      	bcc.n	80004fc <__adddf3+0x124>
 80004c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c8:	d30c      	bcc.n	80004e4 <__adddf3+0x10c>
 80004ca:	0849      	lsrs	r1, r1, #1
 80004cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d4:	f104 0401 	add.w	r4, r4, #1
 80004d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004e0:	f080 809a 	bcs.w	8000618 <__adddf3+0x240>
 80004e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e8:	bf08      	it	eq
 80004ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ee:	f150 0000 	adcs.w	r0, r0, #0
 80004f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004f6:	ea41 0105 	orr.w	r1, r1, r5
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000500:	4140      	adcs	r0, r0
 8000502:	eb41 0101 	adc.w	r1, r1, r1
 8000506:	3c01      	subs	r4, #1
 8000508:	bf28      	it	cs
 800050a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800050e:	d2e9      	bcs.n	80004e4 <__adddf3+0x10c>
 8000510:	f091 0f00 	teq	r1, #0
 8000514:	bf04      	itt	eq
 8000516:	4601      	moveq	r1, r0
 8000518:	2000      	moveq	r0, #0
 800051a:	fab1 f381 	clz	r3, r1
 800051e:	bf08      	it	eq
 8000520:	3320      	addeq	r3, #32
 8000522:	f1a3 030b 	sub.w	r3, r3, #11
 8000526:	f1b3 0220 	subs.w	r2, r3, #32
 800052a:	da0c      	bge.n	8000546 <__adddf3+0x16e>
 800052c:	320c      	adds	r2, #12
 800052e:	dd08      	ble.n	8000542 <__adddf3+0x16a>
 8000530:	f102 0c14 	add.w	ip, r2, #20
 8000534:	f1c2 020c 	rsb	r2, r2, #12
 8000538:	fa01 f00c 	lsl.w	r0, r1, ip
 800053c:	fa21 f102 	lsr.w	r1, r1, r2
 8000540:	e00c      	b.n	800055c <__adddf3+0x184>
 8000542:	f102 0214 	add.w	r2, r2, #20
 8000546:	bfd8      	it	le
 8000548:	f1c2 0c20 	rsble	ip, r2, #32
 800054c:	fa01 f102 	lsl.w	r1, r1, r2
 8000550:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000554:	bfdc      	itt	le
 8000556:	ea41 010c 	orrle.w	r1, r1, ip
 800055a:	4090      	lslle	r0, r2
 800055c:	1ae4      	subs	r4, r4, r3
 800055e:	bfa2      	ittt	ge
 8000560:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000564:	4329      	orrge	r1, r5
 8000566:	bd30      	popge	{r4, r5, pc}
 8000568:	ea6f 0404 	mvn.w	r4, r4
 800056c:	3c1f      	subs	r4, #31
 800056e:	da1c      	bge.n	80005aa <__adddf3+0x1d2>
 8000570:	340c      	adds	r4, #12
 8000572:	dc0e      	bgt.n	8000592 <__adddf3+0x1ba>
 8000574:	f104 0414 	add.w	r4, r4, #20
 8000578:	f1c4 0220 	rsb	r2, r4, #32
 800057c:	fa20 f004 	lsr.w	r0, r0, r4
 8000580:	fa01 f302 	lsl.w	r3, r1, r2
 8000584:	ea40 0003 	orr.w	r0, r0, r3
 8000588:	fa21 f304 	lsr.w	r3, r1, r4
 800058c:	ea45 0103 	orr.w	r1, r5, r3
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	f1c4 040c 	rsb	r4, r4, #12
 8000596:	f1c4 0220 	rsb	r2, r4, #32
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 f304 	lsl.w	r3, r1, r4
 80005a2:	ea40 0003 	orr.w	r0, r0, r3
 80005a6:	4629      	mov	r1, r5
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	fa21 f004 	lsr.w	r0, r1, r4
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	f094 0f00 	teq	r4, #0
 80005b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ba:	bf06      	itte	eq
 80005bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005c0:	3401      	addeq	r4, #1
 80005c2:	3d01      	subne	r5, #1
 80005c4:	e74e      	b.n	8000464 <__adddf3+0x8c>
 80005c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ca:	bf18      	it	ne
 80005cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d0:	d029      	beq.n	8000626 <__adddf3+0x24e>
 80005d2:	ea94 0f05 	teq	r4, r5
 80005d6:	bf08      	it	eq
 80005d8:	ea90 0f02 	teqeq	r0, r2
 80005dc:	d005      	beq.n	80005ea <__adddf3+0x212>
 80005de:	ea54 0c00 	orrs.w	ip, r4, r0
 80005e2:	bf04      	itt	eq
 80005e4:	4619      	moveq	r1, r3
 80005e6:	4610      	moveq	r0, r2
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea91 0f03 	teq	r1, r3
 80005ee:	bf1e      	ittt	ne
 80005f0:	2100      	movne	r1, #0
 80005f2:	2000      	movne	r0, #0
 80005f4:	bd30      	popne	{r4, r5, pc}
 80005f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005fa:	d105      	bne.n	8000608 <__adddf3+0x230>
 80005fc:	0040      	lsls	r0, r0, #1
 80005fe:	4149      	adcs	r1, r1
 8000600:	bf28      	it	cs
 8000602:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000606:	bd30      	pop	{r4, r5, pc}
 8000608:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800060c:	bf3c      	itt	cc
 800060e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000612:	bd30      	popcc	{r4, r5, pc}
 8000614:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000618:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800061c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf1a      	itte	ne
 800062c:	4619      	movne	r1, r3
 800062e:	4610      	movne	r0, r2
 8000630:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000634:	bf1c      	itt	ne
 8000636:	460b      	movne	r3, r1
 8000638:	4602      	movne	r2, r0
 800063a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800063e:	bf06      	itte	eq
 8000640:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000644:	ea91 0f03 	teqeq	r1, r3
 8000648:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	bf00      	nop

08000650 <__aeabi_ui2d>:
 8000650:	f090 0f00 	teq	r0, #0
 8000654:	bf04      	itt	eq
 8000656:	2100      	moveq	r1, #0
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000660:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000664:	f04f 0500 	mov.w	r5, #0
 8000668:	f04f 0100 	mov.w	r1, #0
 800066c:	e750      	b.n	8000510 <__adddf3+0x138>
 800066e:	bf00      	nop

08000670 <__aeabi_i2d>:
 8000670:	f090 0f00 	teq	r0, #0
 8000674:	bf04      	itt	eq
 8000676:	2100      	moveq	r1, #0
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000680:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000684:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000688:	bf48      	it	mi
 800068a:	4240      	negmi	r0, r0
 800068c:	f04f 0100 	mov.w	r1, #0
 8000690:	e73e      	b.n	8000510 <__adddf3+0x138>
 8000692:	bf00      	nop

08000694 <__aeabi_f2d>:
 8000694:	0042      	lsls	r2, r0, #1
 8000696:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800069a:	ea4f 0131 	mov.w	r1, r1, rrx
 800069e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006a2:	bf1f      	itttt	ne
 80006a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006b0:	4770      	bxne	lr
 80006b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006b6:	bf08      	it	eq
 80006b8:	4770      	bxeq	lr
 80006ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006be:	bf04      	itt	eq
 80006c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006c4:	4770      	bxeq	lr
 80006c6:	b530      	push	{r4, r5, lr}
 80006c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	e71c      	b.n	8000510 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_ul2d>:
 80006d8:	ea50 0201 	orrs.w	r2, r0, r1
 80006dc:	bf08      	it	eq
 80006de:	4770      	bxeq	lr
 80006e0:	b530      	push	{r4, r5, lr}
 80006e2:	f04f 0500 	mov.w	r5, #0
 80006e6:	e00a      	b.n	80006fe <__aeabi_l2d+0x16>

080006e8 <__aeabi_l2d>:
 80006e8:	ea50 0201 	orrs.w	r2, r0, r1
 80006ec:	bf08      	it	eq
 80006ee:	4770      	bxeq	lr
 80006f0:	b530      	push	{r4, r5, lr}
 80006f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006f6:	d502      	bpl.n	80006fe <__aeabi_l2d+0x16>
 80006f8:	4240      	negs	r0, r0
 80006fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000702:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000706:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800070a:	f43f aed8 	beq.w	80004be <__adddf3+0xe6>
 800070e:	f04f 0203 	mov.w	r2, #3
 8000712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000716:	bf18      	it	ne
 8000718:	3203      	addne	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000726:	f1c2 0320 	rsb	r3, r2, #32
 800072a:	fa00 fc03 	lsl.w	ip, r0, r3
 800072e:	fa20 f002 	lsr.w	r0, r0, r2
 8000732:	fa01 fe03 	lsl.w	lr, r1, r3
 8000736:	ea40 000e 	orr.w	r0, r0, lr
 800073a:	fa21 f102 	lsr.w	r1, r1, r2
 800073e:	4414      	add	r4, r2
 8000740:	e6bd      	b.n	80004be <__adddf3+0xe6>
 8000742:	bf00      	nop

08000744 <__aeabi_d2f>:
 8000744:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000748:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800074c:	bf24      	itt	cs
 800074e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000752:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000756:	d90d      	bls.n	8000774 <__aeabi_d2f+0x30>
 8000758:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800075c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000760:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000764:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000768:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800076c:	bf08      	it	eq
 800076e:	f020 0001 	biceq.w	r0, r0, #1
 8000772:	4770      	bx	lr
 8000774:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000778:	d121      	bne.n	80007be <__aeabi_d2f+0x7a>
 800077a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800077e:	bfbc      	itt	lt
 8000780:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000784:	4770      	bxlt	lr
 8000786:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800078a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800078e:	f1c2 0218 	rsb	r2, r2, #24
 8000792:	f1c2 0c20 	rsb	ip, r2, #32
 8000796:	fa10 f30c 	lsls.w	r3, r0, ip
 800079a:	fa20 f002 	lsr.w	r0, r0, r2
 800079e:	bf18      	it	ne
 80007a0:	f040 0001 	orrne.w	r0, r0, #1
 80007a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007ac:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007b0:	ea40 000c 	orr.w	r0, r0, ip
 80007b4:	fa23 f302 	lsr.w	r3, r3, r2
 80007b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007bc:	e7cc      	b.n	8000758 <__aeabi_d2f+0x14>
 80007be:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007c2:	d107      	bne.n	80007d4 <__aeabi_d2f+0x90>
 80007c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007c8:	bf1e      	ittt	ne
 80007ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007d2:	4770      	bxne	lr
 80007d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000808:	68fb      	ldr	r3, [r7, #12]
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	0000      	movs	r0, r0
	...

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 fa16 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f8a6 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f000 f95e 	bl	8000ae4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000828:	f000 f8f4 	bl	8000a14 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc);
 800082c:	484c      	ldr	r0, [pc, #304]	; (8000960 <main+0x148>)
 800082e:	f000 fd95 	bl	800135c <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      HAL_ADC_PollForConversion(&hadc,1000);
 8000832:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000836:	484a      	ldr	r0, [pc, #296]	; (8000960 <main+0x148>)
 8000838:	f000 fdd6 	bl	80013e8 <HAL_ADC_PollForConversion>
      readValue = HAL_ADC_GetValue(&hadc);
 800083c:	4848      	ldr	r0, [pc, #288]	; (8000960 <main+0x148>)
 800083e:	f000 fe6a 	bl	8001516 <HAL_ADC_GetValue>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b47      	ldr	r3, [pc, #284]	; (8000964 <main+0x14c>)
 8000848:	801a      	strh	r2, [r3, #0]
      tCelsius = 357.558 - 0.187364 * readValue;
 800084a:	4b46      	ldr	r3, [pc, #280]	; (8000964 <main+0x14c>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff0e 	bl	8000670 <__aeabi_i2d>
 8000854:	a33a      	add	r3, pc, #232	; (adr r3, 8000940 <main+0x128>)
 8000856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800085a:	f7ff fc8d 	bl	8000178 <__aeabi_dmul>
 800085e:	4602      	mov	r2, r0
 8000860:	460b      	mov	r3, r1
 8000862:	a139      	add	r1, pc, #228	; (adr r1, 8000948 <main+0x130>)
 8000864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000868:	f7ff fdb4 	bl	80003d4 <__aeabi_dsub>
 800086c:	4602      	mov	r2, r0
 800086e:	460b      	mov	r3, r1
 8000870:	4610      	mov	r0, r2
 8000872:	4619      	mov	r1, r3
 8000874:	f7ff ff66 	bl	8000744 <__aeabi_d2f>
 8000878:	4603      	mov	r3, r0
 800087a:	4a3b      	ldr	r2, [pc, #236]	; (8000968 <main+0x150>)
 800087c:	6013      	str	r3, [r2, #0]
      tFahrenheit = 675.6 - 0.337255 * readValue;
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <main+0x14c>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fef4 	bl	8000670 <__aeabi_i2d>
 8000888:	a331      	add	r3, pc, #196	; (adr r3, 8000950 <main+0x138>)
 800088a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800088e:	f7ff fc73 	bl	8000178 <__aeabi_dmul>
 8000892:	4602      	mov	r2, r0
 8000894:	460b      	mov	r3, r1
 8000896:	a130      	add	r1, pc, #192	; (adr r1, 8000958 <main+0x140>)
 8000898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800089c:	f7ff fd9a 	bl	80003d4 <__aeabi_dsub>
 80008a0:	4602      	mov	r2, r0
 80008a2:	460b      	mov	r3, r1
 80008a4:	4610      	mov	r0, r2
 80008a6:	4619      	mov	r1, r3
 80008a8:	f7ff ff4c 	bl	8000744 <__aeabi_d2f>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a2f      	ldr	r2, [pc, #188]	; (800096c <main+0x154>)
 80008b0:	6013      	str	r3, [r2, #0]
      if (readValue > 1740)
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <main+0x14c>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	f240 62cc 	movw	r2, #1740	; 0x6cc
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d912      	bls.n	80008e4 <main+0xcc>
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f001 fa33 	bl	8001d30 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2110      	movs	r1, #16
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f001 fa2d 	bl	8001d30 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2102      	movs	r1, #2
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f001 fa27 	bl	8001d30 <HAL_GPIO_WritePin>
 80008e2:	e029      	b.n	8000938 <main+0x120>
      }
      else if (readValue > 1720 )
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <main+0x14c>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	f5b3 6fd7 	cmp.w	r3, #1720	; 0x6b8
 80008ec:	d912      	bls.n	8000914 <main+0xfc>
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f001 fa1b 	bl	8001d30 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2110      	movs	r1, #16
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f001 fa15 	bl	8001d30 <HAL_GPIO_WritePin>





        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2102      	movs	r1, #2
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f001 fa0f 	bl	8001d30 <HAL_GPIO_WritePin>
 8000912:	e011      	b.n	8000938 <main+0x120>
      }
      else
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f001 fa08 	bl	8001d30 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2110      	movs	r1, #16
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f001 fa02 	bl	8001d30 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2102      	movs	r1, #2
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f001 f9fc 	bl	8001d30 <HAL_GPIO_WritePin>
      }
      HAL_Delay(100);
 8000938:	2064      	movs	r0, #100	; 0x64
 800093a:	f000 f9fd 	bl	8000d38 <HAL_Delay>
      HAL_ADC_PollForConversion(&hadc,1000);
 800093e:	e778      	b.n	8000832 <main+0x1a>
 8000940:	26394fad 	.word	0x26394fad
 8000944:	3fc7fb8b 	.word	0x3fc7fb8b
 8000948:	916872b0 	.word	0x916872b0
 800094c:	407658ed 	.word	0x407658ed
 8000950:	feda6613 	.word	0xfeda6613
 8000954:	3fd59595 	.word	0x3fd59595
 8000958:	cccccccd 	.word	0xcccccccd
 800095c:	40851ccc 	.word	0x40851ccc
 8000960:	20000028 	.word	0x20000028
 8000964:	2000008c 	.word	0x2000008c
 8000968:	20000090 	.word	0x20000090
 800096c:	20000094 	.word	0x20000094

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09a      	sub	sp, #104	; 0x68
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2248      	movs	r2, #72	; 0x48
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f002 facc 	bl	8002f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <SystemClock_Config+0xa0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800099e:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <SystemClock_Config+0xa0>)
 80009a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <SystemClock_Config+0xa0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009b2:	2320      	movs	r3, #32
 80009b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b6:	2301      	movs	r3, #1
 80009b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009be:	2360      	movs	r3, #96	; 0x60
 80009c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fc5c 	bl	8002288 <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009d6:	f000 f8aa 	bl	8000b2e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80009da:	234f      	movs	r3, #79	; 0x4f
 80009dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 ffe1 	bl	80029c0 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a04:	f000 f893 	bl	8000b2e <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3768      	adds	r7, #104	; 0x68
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	58000400 	.word	0x58000400

08000a14 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000a24:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <MX_ADC_Init+0xc8>)
 8000a28:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a2c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000a30:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a32:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a86:	2206      	movs	r2, #6
 8000a88:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000aa0:	f000 faa8 	bl	8000ff4 <HAL_ADC_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC_Init+0x9a>
  {
    Error_Handler();
 8000aaa:	f000 f840 	bl	8000b2e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_ADC_Init+0xcc>)
 8000ab0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <MX_ADC_Init+0xc4>)
 8000ac0:	f000 fd36 	bl	8001530 <HAL_ADC_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC_Init+0xba>
  {
    Error_Handler();
 8000aca:	f000 f830 	bl	8000b2e <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000028 	.word	0x20000028
 8000adc:	40012400 	.word	0x40012400
 8000ae0:	b0001000 	.word	0xb0001000

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe73 	bl	80007e4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2192      	movs	r1, #146	; 0x92
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f001 f913 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 8000b0a:	2392      	movs	r3, #146	; 0x92
 8000b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f000 ffa5 	bl	8001a70 <HAL_GPIO_Init>

}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b32:	b672      	cpsid	i
}
 8000b34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <Error_Handler+0x8>

08000b38 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <HAL_ADC_MspInit+0x24>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d103      	bne.n	8000b8e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b8a:	f7ff ffd5 	bl	8000b38 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40012400 	.word	0x40012400

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be2:	f000 f88d 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}

08000bea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bfc:	f7ff fff5 	bl	8000bea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c26:	f002 f955 	bl	8002ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff fdf5 	bl	8000818 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   r0, =_estack
 8000c30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c3c:	08002fe8 	.word	0x08002fe8
  ldr r2, =_sbss
 8000c40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c44:	2000009c 	.word	0x2000009c

08000c48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 fed8 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000c5c:	f002 f874 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_Init+0x3c>)
 8000c64:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f810 	bl	8000c8c <HAL_InitTick>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	e001      	b.n	8000c7c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c78:	f7ff ff76 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000000 	.word	0x20000000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d024      	beq.n	8000cea <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca0:	f002 f852 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_InitTick+0x6c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fecc 	bl	8001a56 <HAL_SYSTICK_Config>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10f      	bne.n	8000ce4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	d809      	bhi.n	8000cde <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd2:	f000 fea6 	bl	8001a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <HAL_InitTick+0x70>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e007      	b.n	8000cee <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e004      	b.n	8000cee <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e001      	b.n	8000cee <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_IncTick+0x20>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000098 	.word	0x20000098

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	20000098 	.word	0x20000098

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff fff0 	bl	8000d24 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffe0 	bl	8000d24 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008

08000d80 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	695a      	ldr	r2, [r3, #20]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	401a      	ands	r2, r3
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	431a      	orrs	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695a      	ldr	r2, [r3, #20]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2107      	movs	r1, #7
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b085      	sub	sp, #20
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	210f      	movs	r1, #15
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0e9b      	lsrs	r3, r3, #26
 8000e72:	f003 010f 	and.w	r1, r3, #15
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	f003 031f 	and.w	r3, r3, #31
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	431a      	orrs	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	401a      	ands	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	695a      	ldr	r2, [r3, #20]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	0219      	lsls	r1, r3, #8
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	400b      	ands	r3, r1
 8000efa:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8000efe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f02:	431a      	orrs	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f22:	f023 0317 	bic.w	r3, r3, #23
 8000f26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f4c:	d101      	bne.n	8000f52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f6e:	f023 0317 	bic.w	r3, r3, #23
 8000f72:	f043 0201 	orr.w	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <LL_ADC_IsEnabled+0x18>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <LL_ADC_IsEnabled+0x1a>
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fb8:	f023 0317 	bic.w	r3, r3, #23
 8000fbc:	f043 0204 	orr.w	r2, r3, #4
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d101      	bne.n	8000fe6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
	...

08000ff4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e19e      	b.n	8001354 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fda5 	bl	8000b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff7b 	bl	8000f38 <LL_ADC_IsInternalRegulatorEnabled>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d115      	bne.n	8001074 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff60 	bl	8000f12 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001052:	4b99      	ldr	r3, [pc, #612]	; (80012b8 <HAL_ADC_Init+0x2c4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	099b      	lsrs	r3, r3, #6
 8001058:	4a98      	ldr	r2, [pc, #608]	; (80012bc <HAL_ADC_Init+0x2c8>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	099b      	lsrs	r3, r3, #6
 8001060:	3301      	adds	r3, #1
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001066:	e002      	b.n	800106e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3b01      	subs	r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f9      	bne.n	8001068 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5d 	bl	8000f38 <LL_ADC_IsInternalRegulatorEnabled>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10d      	bne.n	80010a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f043 0210 	orr.w	r2, r3, #16
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff92 	bl	8000fce <LL_ADC_REG_IsConversionOngoing>
 80010aa:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f040 8144 	bne.w	8001342 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f040 8140 	bne.w	8001342 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010ca:	f043 0202 	orr.w	r2, r3, #2
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff54 	bl	8000f84 <LL_ADC_IsEnabled>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f040 80a7 	bne.w	8001232 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7e1b      	ldrb	r3, [r3, #24]
 80010ec:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7e5b      	ldrb	r3, [r3, #25]
 80010f4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010f6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7e9b      	ldrb	r3, [r3, #26]
 80010fc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010fe:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001104:	2a00      	cmp	r2, #0
 8001106:	d002      	beq.n	800110e <HAL_ADC_Init+0x11a>
 8001108:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800110c:	e000      	b.n	8001110 <HAL_ADC_Init+0x11c>
 800110e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001110:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001116:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	da04      	bge.n	800112a <HAL_ADC_Init+0x136>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001128:	e001      	b.n	800112e <HAL_ADC_Init+0x13a>
 800112a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800112e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001136:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001138:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d114      	bne.n	8001174 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e9b      	ldrb	r3, [r3, #26]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d104      	bne.n	800115c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	e00b      	b.n	8001174 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	f043 0220 	orr.w	r2, r3, #32
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116c:	f043 0201 	orr.w	r2, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	d009      	beq.n	8001190 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001188:	4313      	orrs	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800119a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	430b      	orrs	r3, r1
 80011a6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011b4:	4313      	orrs	r3, r2
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d111      	bne.n	80011ea <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80011d8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80011de:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <HAL_ADC_Init+0x2cc>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	6979      	ldr	r1, [r7, #20]
 80011fa:	430b      	orrs	r3, r1
 80011fc:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001206:	d014      	beq.n	8001232 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001210:	d00f      	beq.n	8001232 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800121a:	d00a      	beq.n	8001232 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_ADC_Init+0x2d0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800122c:	4925      	ldr	r1, [pc, #148]	; (80012c4 <HAL_ADC_Init+0x2d0>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123a:	461a      	mov	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	f7ff fdbe 	bl	8000dbe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124a:	461a      	mov	r2, r3
 800124c:	491e      	ldr	r1, [pc, #120]	; (80012c8 <HAL_ADC_Init+0x2d4>)
 800124e:	f7ff fdb6 	bl	8000dbe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d108      	bne.n	800126c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f062 020f 	orn	r2, r2, #15
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
 800126a:	e042      	b.n	80012f2 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001274:	d13d      	bne.n	80012f2 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	e00c      	b.n	8001296 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d006      	beq.n	800129e <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	3301      	adds	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	2b07      	cmp	r3, #7
 800129a:	d9ef      	bls.n	800127c <HAL_ADC_Init+0x288>
 800129c:	e000      	b.n	80012a0 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 800129e:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d112      	bne.n	80012cc <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f062 020f 	orn	r2, r2, #15
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
 80012b6:	e01c      	b.n	80012f2 <HAL_ADC_Init+0x2fe>
 80012b8:	20000000 	.word	0x20000000
 80012bc:	053e2d63 	.word	0x053e2d63
 80012c0:	1ffffc02 	.word	0x1ffffc02
 80012c4:	40012708 	.word	0x40012708
 80012c8:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	f003 031c 	and.w	r3, r3, #28
 80012de:	f06f 020f 	mvn.w	r2, #15
 80012e2:	fa02 f103 	lsl.w	r1, r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fd7e 	bl	8000dfa <LL_ADC_GetSamplingTimeCommonChannels>
 80012fe:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001304:	429a      	cmp	r2, r3
 8001306:	d10b      	bne.n	8001320 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	f023 0303 	bic.w	r3, r3, #3
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800131e:	e018      	b.n	8001352 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	f023 0312 	bic.w	r3, r3, #18
 8001328:	f043 0210 	orr.w	r2, r3, #16
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	f043 0201 	orr.w	r2, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001340:	e007      	b.n	8001352 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	f043 0210 	orr.w	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8001352:	7ffb      	ldrb	r3, [r7, #31]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe30 	bl	8000fce <LL_ADC_REG_IsConversionOngoing>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d132      	bne.n	80013da <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Start+0x26>
 800137e:	2302      	movs	r3, #2
 8001380:	e02e      	b.n	80013e0 <HAL_ADC_Start+0x84>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fa08 	bl	80017a0 <ADC_Enable>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d11a      	bne.n	80013d0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	221c      	movs	r2, #28
 80013ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fded 	bl	8000fa8 <LL_ADC_REG_StartConversion>
 80013ce:	e006      	b.n	80013de <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80013d8:	e001      	b.n	80013de <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013da:	2302      	movs	r3, #2
 80013dc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d102      	bne.n	8001400 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80013fa:	2308      	movs	r3, #8
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	e010      	b.n	8001422 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f043 0220 	orr.w	r2, r3, #32
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e077      	b.n	800150e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800141e:	2304      	movs	r3, #4
 8001420:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001422:	f7ff fc7f 	bl	8000d24 <HAL_GetTick>
 8001426:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001428:	e021      	b.n	800146e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001430:	d01d      	beq.n	800146e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001432:	f7ff fc77 	bl	8000d24 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d302      	bcc.n	8001448 <HAL_ADC_PollForConversion+0x60>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d112      	bne.n	800146e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10b      	bne.n	800146e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	f043 0204 	orr.w	r2, r3, #4
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e04f      	b.n	800150e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0d6      	beq.n	800142a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fccc 	bl	8000e2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d031      	beq.n	80014fc <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e9b      	ldrb	r3, [r3, #26]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d12d      	bne.n	80014fc <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d126      	bne.n	80014fc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fd8b 	bl	8000fce <LL_ADC_REG_IsConversionOngoing>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d112      	bne.n	80014e4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 020c 	bic.w	r2, r2, #12
 80014cc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	f043 0201 	orr.w	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	659a      	str	r2, [r3, #88]	; 0x58
 80014e2:	e00b      	b.n	80014fc <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	f043 0220 	orr.w	r2, r3, #32
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f4:	f043 0201 	orr.w	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7e1b      	ldrb	r3, [r3, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d103      	bne.n	800150c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	220c      	movs	r2, #12
 800150a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
	...

08001530 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x28>
 8001554:	2302      	movs	r3, #2
 8001556:	e110      	b.n	800177a <HAL_ADC_ConfigChannel+0x24a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fd32 	bl	8000fce <LL_ADC_REG_IsConversionOngoing>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 80f7 	bne.w	8001760 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	f000 80b1 	beq.w	80016de <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001584:	d004      	beq.n	8001590 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800158a:	4a7e      	ldr	r2, [pc, #504]	; (8001784 <HAL_ADC_ConfigChannel+0x254>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d108      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f7ff fc78 	bl	8000e90 <LL_ADC_REG_SetSequencerChAdd>
 80015a0:	e041      	b.n	8001626 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	210f      	movs	r1, #15
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	401a      	ands	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0xa0>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0e9b      	lsrs	r3, r3, #26
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	e011      	b.n	80015f4 <HAL_ADC_ConfigChannel+0xc4>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80015e8:	2320      	movs	r3, #32
 80015ea:	e003      	b.n	80015f4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fab3 f383 	clz	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	6839      	ldr	r1, [r7, #0]
 80015f6:	6849      	ldr	r1, [r1, #4]
 80015f8:	f001 011f 	and.w	r1, r1, #31
 80015fc:	408b      	lsls	r3, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	429a      	cmp	r2, r3
 8001612:	d808      	bhi.n	8001626 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	f7ff fc14 	bl	8000e4e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	461a      	mov	r2, r3
 8001634:	f7ff fc51 	bl	8000eda <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f280 8097 	bge.w	8001770 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001642:	4851      	ldr	r0, [pc, #324]	; (8001788 <HAL_ADC_ConfigChannel+0x258>)
 8001644:	f7ff fbae 	bl	8000da4 <LL_ADC_GetCommonPathInternalCh>
 8001648:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a4f      	ldr	r2, [pc, #316]	; (800178c <HAL_ADC_ConfigChannel+0x25c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d120      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800165a:	2b00      	cmp	r3, #0
 800165c:	d11b      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001664:	4619      	mov	r1, r3
 8001666:	4848      	ldr	r0, [pc, #288]	; (8001788 <HAL_ADC_ConfigChannel+0x258>)
 8001668:	f7ff fb8a 	bl	8000d80 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800166c:	4b48      	ldr	r3, [pc, #288]	; (8001790 <HAL_ADC_ConfigChannel+0x260>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	4a48      	ldr	r2, [pc, #288]	; (8001794 <HAL_ADC_ConfigChannel+0x264>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001686:	e002      	b.n	800168e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3b01      	subs	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f9      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001694:	e06c      	b.n	8001770 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a3f      	ldr	r2, [pc, #252]	; (8001798 <HAL_ADC_ConfigChannel+0x268>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d10c      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x18a>
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d107      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b0:	4619      	mov	r1, r3
 80016b2:	4835      	ldr	r0, [pc, #212]	; (8001788 <HAL_ADC_ConfigChannel+0x258>)
 80016b4:	f7ff fb64 	bl	8000d80 <LL_ADC_SetCommonPathInternalCh>
 80016b8:	e05a      	b.n	8001770 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a37      	ldr	r2, [pc, #220]	; (800179c <HAL_ADC_ConfigChannel+0x26c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d155      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d150      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d4:	4619      	mov	r1, r3
 80016d6:	482c      	ldr	r0, [pc, #176]	; (8001788 <HAL_ADC_ConfigChannel+0x258>)
 80016d8:	f7ff fb52 	bl	8000d80 <LL_ADC_SetCommonPathInternalCh>
 80016dc:	e048      	b.n	8001770 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016e6:	d004      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016ec:	4a25      	ldr	r2, [pc, #148]	; (8001784 <HAL_ADC_ConfigChannel+0x254>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d107      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7ff fbd9 	bl	8000eb4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	da32      	bge.n	8001770 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800170a:	481f      	ldr	r0, [pc, #124]	; (8001788 <HAL_ADC_ConfigChannel+0x258>)
 800170c:	f7ff fb4a 	bl	8000da4 <LL_ADC_GetCommonPathInternalCh>
 8001710:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_ADC_ConfigChannel+0x25c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d107      	bne.n	800172c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001722:	4619      	mov	r1, r3
 8001724:	4818      	ldr	r0, [pc, #96]	; (8001788 <HAL_ADC_ConfigChannel+0x258>)
 8001726:	f7ff fb2b 	bl	8000d80 <LL_ADC_SetCommonPathInternalCh>
 800172a:	e021      	b.n	8001770 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_ADC_ConfigChannel+0x268>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d107      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800173c:	4619      	mov	r1, r3
 800173e:	4812      	ldr	r0, [pc, #72]	; (8001788 <HAL_ADC_ConfigChannel+0x258>)
 8001740:	f7ff fb1e 	bl	8000d80 <LL_ADC_SetCommonPathInternalCh>
 8001744:	e014      	b.n	8001770 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_ADC_ConfigChannel+0x26c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d10f      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001756:	4619      	mov	r1, r3
 8001758:	480b      	ldr	r0, [pc, #44]	; (8001788 <HAL_ADC_ConfigChannel+0x258>)
 800175a:	f7ff fb11 	bl	8000d80 <LL_ADC_SetCommonPathInternalCh>
 800175e:	e007      	b.n	8001770 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8001778:	7ffb      	ldrb	r3, [r7, #31]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	80000004 	.word	0x80000004
 8001788:	40012708 	.word	0x40012708
 800178c:	b0001000 	.word	0xb0001000
 8001790:	20000000 	.word	0x20000000
 8001794:	053e2d63 	.word	0x053e2d63
 8001798:	b8004000 	.word	0xb8004000
 800179c:	b4002000 	.word	0xb4002000

080017a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fbe7 	bl	8000f84 <LL_ADC_IsEnabled>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d169      	bne.n	8001890 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <ADC_Enable+0xfc>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00d      	beq.n	80017e6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e055      	b.n	8001892 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fbb7 	bl	8000f5e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80017f0:	482b      	ldr	r0, [pc, #172]	; (80018a0 <ADC_Enable+0x100>)
 80017f2:	f7ff fad7 	bl	8000da4 <LL_ADC_GetCommonPathInternalCh>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00f      	beq.n	8001820 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <ADC_Enable+0x104>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <ADC_Enable+0x108>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	099b      	lsrs	r3, r3, #6
 800180e:	3301      	adds	r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001812:	e002      	b.n	800181a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3b01      	subs	r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f9      	bne.n	8001814 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7e5b      	ldrb	r3, [r3, #25]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d033      	beq.n	8001890 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001828:	f7ff fa7c 	bl	8000d24 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800182e:	e028      	b.n	8001882 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fba5 	bl	8000f84 <LL_ADC_IsEnabled>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d104      	bne.n	800184a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb8a 	bl	8000f5e <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800184a:	f7ff fa6b 	bl	8000d24 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d914      	bls.n	8001882 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d00d      	beq.n	8001882 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	f043 0210 	orr.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e007      	b.n	8001892 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d1cf      	bne.n	8001830 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	80000017 	.word	0x80000017
 80018a0:	40012708 	.word	0x40012708
 80018a4:	20000000 	.word	0x20000000
 80018a8:	053e2d63 	.word	0x053e2d63

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ec:	f7ff ff90 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff49 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff60 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff92 	bl	8001964 <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff61 	bl	8001910 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffb2 	bl	80019c8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e140      	b.n	8001d02 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8132 	beq.w	8001cfc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d005      	beq.n	8001ab0 <HAL_GPIO_Init+0x40>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d130      	bne.n	8001b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 0201 	and.w	r2, r3, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d017      	beq.n	8001b4e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d123      	bne.n	8001ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	08da      	lsrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3208      	adds	r2, #8
 8001b9c:	6939      	ldr	r1, [r7, #16]
 8001b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0203 	and.w	r2, r3, #3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 808c 	beq.w	8001cfc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001be4:	4a4e      	ldr	r2, [pc, #312]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c0e:	d00d      	beq.n	8001c2c <HAL_GPIO_Init+0x1bc>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a44      	ldr	r2, [pc, #272]	; (8001d24 <HAL_GPIO_Init+0x2b4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d007      	beq.n	8001c28 <HAL_GPIO_Init+0x1b8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a43      	ldr	r2, [pc, #268]	; (8001d28 <HAL_GPIO_Init+0x2b8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_GPIO_Init+0x1b4>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x1be>
 8001c24:	2307      	movs	r3, #7
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x1be>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x1be>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3e:	4938      	ldr	r1, [pc, #224]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4c:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_GPIO_Init+0x2bc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c70:	4a2e      	ldr	r2, [pc, #184]	; (8001d2c <HAL_GPIO_Init+0x2bc>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_GPIO_Init+0x2bc>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c9a:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_GPIO_Init+0x2bc>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_GPIO_Init+0x2bc>)
 8001ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_GPIO_Init+0x2bc>)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_GPIO_Init+0x2bc>)
 8001cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cd4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_GPIO_Init+0x2bc>)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f aeb7 	bne.w	8001a80 <HAL_GPIO_Init+0x10>
  }
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010000 	.word	0x40010000
 8001d24:	48000400 	.word	0x48000400
 8001d28:	48000800 	.word	0x48000800
 8001d2c:	58000800 	.word	0x58000800

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	58000400 	.word	0x58000400

08001d7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_PWREx_GetVoltageRange+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	58000400 	.word	0x58000400

08001d94 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da4:	d101      	bne.n	8001daa <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	58000400 	.word	0x58000400

08001db8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e02:	d101      	bne.n	8001e08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e5c:	d101      	bne.n	8001e62 <LL_RCC_HSE_IsReady+0x18>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <LL_RCC_HSE_IsReady+0x1a>
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb6:	d101      	bne.n	8001ebc <LL_RCC_HSI_IsReady+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_RCC_HSI_IsReady+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	061b      	lsls	r3, r3, #24
 8001edc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d101      	bne.n	8001f06 <LL_RCC_LSE_IsReady+0x18>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_RCC_LSE_IsReady+0x1a>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d101      	bne.n	8001f68 <LL_RCC_LSI_IsReady+0x18>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_RCC_LSI_IsReady+0x1a>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6013      	str	r3, [r2, #0]
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6013      	str	r3, [r2, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d101      	bne.n	8001fc0 <LL_RCC_MSI_IsReady+0x16>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_RCC_MSI_IsReady+0x18>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d101      	bne.n	8001fe0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020b2:	f023 020f 	bic.w	r2, r3, #15
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002138:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215c:	6013      	str	r3, [r2, #0]
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002194:	d101      	bne.n	800219a <LL_RCC_PLL_IsReady+0x18>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_RCC_PLL_IsReady+0x1a>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0303 	and.w	r3, r3, #3
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d101      	bne.n	8002216 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002234:	d101      	bne.n	800223a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002256:	d101      	bne.n	800225c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002274:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002278:	d101      	bne.n	800227e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e38b      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229a:	f7ff fee4 	bl	8002066 <LL_RCC_GetSysClkSource>
 800229e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a0:	f7ff ffa2 	bl	80021e8 <LL_RCC_PLL_GetMainSource>
 80022a4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80c9 	beq.w	8002446 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x3e>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	d17b      	bne.n	80023b8 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d178      	bne.n	80023b8 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c6:	f7ff fe70 	bl	8001faa <LL_RCC_MSI_IsReady>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_OscConfig+0x54>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e36a      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x72>
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f8:	e006      	b.n	8002308 <HAL_RCC_OscConfig+0x80>
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002308:	4293      	cmp	r3, r2
 800230a:	d222      	bcs.n	8002352 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fd2d 	bl	8002d70 <RCC_SetFlashLatencyFromMSIRange>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e348      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fe64 	bl	8002018 <LL_RCC_MSI_SetCalibTrimming>
 8002350:	e021      	b.n	8002396 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe4b 	bl	8002018 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fcf2 	bl	8002d70 <RCC_SetFlashLatencyFromMSIRange>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e30d      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002396:	f000 fcd7 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 800239a:	4603      	mov	r3, r0
 800239c:	4aa1      	ldr	r2, [pc, #644]	; (8002624 <HAL_RCC_OscConfig+0x39c>)
 800239e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023a0:	4ba1      	ldr	r3, [pc, #644]	; (8002628 <HAL_RCC_OscConfig+0x3a0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fc71 	bl	8000c8c <HAL_InitTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d047      	beq.n	8002444 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	e2fc      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d02c      	beq.n	800241a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c0:	f7ff fdd7 	bl	8001f72 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fcae 	bl	8000d24 <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023cc:	f7fe fcaa 	bl	8000d24 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e2e9      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023de:	f7ff fde4 	bl	8001faa <LL_RCC_MSI_IsReady>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f1      	beq.n	80023cc <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fe00 	bl	8002018 <LL_RCC_MSI_SetCalibTrimming>
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800241a:	f7ff fdb8 	bl	8001f8e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800241e:	f7fe fc81 	bl	8000d24 <HAL_GetTick>
 8002422:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002426:	f7fe fc7d 	bl	8000d24 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e2bc      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002438:	f7ff fdb7 	bl	8001faa <LL_RCC_MSI_IsReady>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f1      	bne.n	8002426 <HAL_RCC_OscConfig+0x19e>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002444:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d05f      	beq.n	8002512 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d005      	beq.n	8002464 <HAL_RCC_OscConfig+0x1dc>
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d10a      	bne.n	800247a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	f7ff fcf1 	bl	8001e4a <LL_RCC_HSE_IsReady>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d050      	beq.n	8002510 <HAL_RCC_OscConfig+0x288>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d14c      	bne.n	8002510 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e29b      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d102      	bne.n	80024a0 <HAL_RCC_OscConfig+0x218>
 800249a:	f7ff fcba 	bl	8001e12 <LL_RCC_HSE_Enable>
 800249e:	e00d      	b.n	80024bc <HAL_RCC_OscConfig+0x234>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80024a8:	d104      	bne.n	80024b4 <HAL_RCC_OscConfig+0x22c>
 80024aa:	f7ff fc85 	bl	8001db8 <LL_RCC_HSE_EnableTcxo>
 80024ae:	f7ff fcb0 	bl	8001e12 <LL_RCC_HSE_Enable>
 80024b2:	e003      	b.n	80024bc <HAL_RCC_OscConfig+0x234>
 80024b4:	f7ff fcbb 	bl	8001e2e <LL_RCC_HSE_Disable>
 80024b8:	f7ff fc8c 	bl	8001dd4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d012      	beq.n	80024ea <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fc2e 	bl	8000d24 <HAL_GetTick>
 80024c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fc2a 	bl	8000d24 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e269      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80024de:	f7ff fcb4 	bl	8001e4a <LL_RCC_HSE_IsReady>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f1      	beq.n	80024cc <HAL_RCC_OscConfig+0x244>
 80024e8:	e013      	b.n	8002512 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fc1b 	bl	8000d24 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f2:	f7fe fc17 	bl	8000d24 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	; 0x64
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e256      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002504:	f7ff fca1 	bl	8001e4a <LL_RCC_HSE_IsReady>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f1      	bne.n	80024f2 <HAL_RCC_OscConfig+0x26a>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04b      	beq.n	80025b6 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d005      	beq.n	8002530 <HAL_RCC_OscConfig+0x2a8>
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d113      	bne.n	8002552 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d110      	bne.n	8002552 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002530:	f7ff fcb8 	bl	8001ea4 <LL_RCC_HSI_IsReady>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x2be>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e235      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fcbb 	bl	8001ec6 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	e031      	b.n	80025b6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d019      	beq.n	800258e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255a:	f7ff fc87 	bl	8001e6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7fe fbe1 	bl	8000d24 <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7fe fbdd 	bl	8000d24 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e21c      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002578:	f7ff fc94 	bl	8001ea4 <LL_RCC_HSI_IsReady>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f1      	beq.n	8002566 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fc9d 	bl	8001ec6 <LL_RCC_HSI_SetCalibTrimming>
 800258c:	e013      	b.n	80025b6 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	f7ff fc7b 	bl	8001e88 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe fbc7 	bl	8000d24 <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe fbc3 	bl	8000d24 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e202      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80025ac:	f7ff fc7a 	bl	8001ea4 <LL_RCC_HSI_IsReady>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f1      	bne.n	800259a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d06f      	beq.n	80026a2 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d057      	beq.n	800267a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	429a      	cmp	r2, r3
 80025e0:	d036      	beq.n	8002650 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d006      	beq.n	80025fa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1db      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d018      	beq.n	8002636 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8002604:	f7ff fc94 	bl	8001f30 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002608:	f7fe fb8c 	bl	8000d24 <HAL_GetTick>
 800260c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800260e:	e00d      	b.n	800262c <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe fb88 	bl	8000d24 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b11      	cmp	r3, #17
 800261c:	d906      	bls.n	800262c <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1c7      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
 8002622:	bf00      	nop
 8002624:	20000000 	.word	0x20000000
 8002628:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 800262c:	f7ff fc90 	bl	8001f50 <LL_RCC_LSI_IsReady>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1ec      	bne.n	8002610 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263e:	f023 0210 	bic.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002650:	f7ff fc5e 	bl	8001f10 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe fb66 	bl	8000d24 <HAL_GetTick>
 8002658:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265c:	f7fe fb62 	bl	8000d24 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b11      	cmp	r3, #17
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e1a1      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800266e:	f7ff fc6f 	bl	8001f50 <LL_RCC_LSI_IsReady>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f1      	beq.n	800265c <HAL_RCC_OscConfig+0x3d4>
 8002678:	e013      	b.n	80026a2 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267a:	f7ff fc59 	bl	8001f30 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7fe fb51 	bl	8000d24 <HAL_GetTick>
 8002682:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002686:	f7fe fb4d 	bl	8000d24 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b11      	cmp	r3, #17
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e18c      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002698:	f7ff fc5a 	bl	8001f50 <LL_RCC_LSI_IsReady>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f1      	bne.n	8002686 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80d8 	beq.w	8002860 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80026b0:	f7ff fb70 	bl	8001d94 <LL_PWR_IsEnabledBkUpAccess>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d113      	bne.n	80026e2 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026ba:	f7ff fb51 	bl	8001d60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7fe fb31 	bl	8000d24 <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7fe fb2d 	bl	8000d24 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e16c      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80026d8:	f7ff fb5c 	bl	8001d94 <LL_PWR_IsEnabledBkUpAccess>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f1      	beq.n	80026c6 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d07b      	beq.n	80027e2 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b85      	cmp	r3, #133	; 0x85
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d109      	bne.n	800270e <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fb09 	bl	8000d24 <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe fafb 	bl	8000d24 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e138      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002740:	f7ff fbd5 	bl	8001eee <LL_RCC_LSE_IsReady>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ef      	beq.n	800272a <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b81      	cmp	r3, #129	; 0x81
 8002750:	d003      	beq.n	800275a <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b85      	cmp	r3, #133	; 0x85
 8002758:	d121      	bne.n	800279e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fae3 	bl	8000d24 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe fad5 	bl	8000d24 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e112      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ec      	beq.n	8002776 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800279c:	e060      	b.n	8002860 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fac1 	bl	8000d24 <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe fab3 	bl	8000d24 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0f0      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ec      	bne.n	80027ba <HAL_RCC_OscConfig+0x532>
 80027e0:	e03e      	b.n	8002860 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7fe fa9f 	bl	8000d24 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fa91 	bl	8000d24 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0ce      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ec      	bne.n	80027fe <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fa7e 	bl	8000d24 <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fa70 	bl	8000d24 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0ad      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002856:	f7ff fb4a 	bl	8001eee <LL_RCC_LSE_IsReady>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ef      	bne.n	8002840 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80a3 	beq.w	80029b0 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b0c      	cmp	r3, #12
 800286e:	d076      	beq.n	800295e <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	2b02      	cmp	r3, #2
 8002876:	d14b      	bne.n	8002910 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002878:	f7ff fc75 	bl	8002166 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fa52 	bl	8000d24 <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe fa4e 	bl	8000d24 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b0a      	cmp	r3, #10
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e08d      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002896:	f7ff fc74 	bl	8002182 <LL_RCC_PLL_IsReady>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f1      	bne.n	8002884 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	4b45      	ldr	r3, [pc, #276]	; (80029bc <HAL_RCC_OscConfig+0x734>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b8:	0212      	lsls	r2, r2, #8
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028cc:	430a      	orrs	r2, r1
 80028ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d6:	f7ff fc38 	bl	800214a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe fa1b 	bl	8000d24 <HAL_GetTick>
 80028ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fa17 	bl	8000d24 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b0a      	cmp	r3, #10
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e056      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002904:	f7ff fc3d 	bl	8002182 <LL_RCC_PLL_IsReady>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f1      	beq.n	80028f2 <HAL_RCC_OscConfig+0x66a>
 800290e:	e04f      	b.n	80029b0 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002910:	f7ff fc29 	bl	8002166 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800292e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe f9f4 	bl	8000d24 <HAL_GetTick>
 800293c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe f9f0 	bl	8000d24 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b0a      	cmp	r3, #10
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e02f      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002952:	f7ff fc16 	bl	8002182 <LL_RCC_PLL_IsReady>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f1      	bne.n	8002940 <HAL_RCC_OscConfig+0x6b8>
 800295c:	e028      	b.n	80029b0 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e023      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f003 0203 	and.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	429a      	cmp	r2, r3
 800297e:	d115      	bne.n	80029ac <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	429a      	cmp	r2, r3
 800298c:	d10e      	bne.n	80029ac <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	429a      	cmp	r2, r3
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	11c1808c 	.word	0x11c1808c

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e10f      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b89      	ldr	r3, [pc, #548]	; (8002bfc <HAL_RCC_ClockConfig+0x23c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d91b      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b86      	ldr	r3, [pc, #536]	; (8002bfc <HAL_RCC_ClockConfig+0x23c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 0207 	bic.w	r2, r3, #7
 80029ea:	4984      	ldr	r1, [pc, #528]	; (8002bfc <HAL_RCC_ClockConfig+0x23c>)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f2:	f7fe f997 	bl	8000d24 <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029fa:	f7fe f993 	bl	8000d24 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0f3      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCC_ClockConfig+0x23c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d1ef      	bne.n	80029fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fb26 	bl	800207c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a30:	f7fe f978 	bl	8000d24 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a38:	f7fe f974 	bl	8000d24 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0d4      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a4a:	f7ff fbd8 	bl	80021fe <LL_RCC_IsActiveFlag_HPRE>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f1      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d016      	beq.n	8002a8e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fb1c 	bl	80020a2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a6a:	f7fe f95b 	bl	8000d24 <HAL_GetTick>
 8002a6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a72:	f7fe f957 	bl	8000d24 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e0b7      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a84:	f7ff fbcc 	bl	8002220 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f1      	beq.n	8002a72 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fb15 	bl	80020ce <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aa4:	f7fe f93e 	bl	8000d24 <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aac:	f7fe f93a 	bl	8000d24 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e09a      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002abe:	f7ff fbc1 	bl	8002244 <LL_RCC_IsActiveFlag_PPRE1>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f1      	beq.n	8002aac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d017      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fb0a 	bl	80020f4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ae0:	f7fe f920 	bl	8000d24 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ae8:	f7fe f91c 	bl	8000d24 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e07c      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002afa:	f7ff fbb4 	bl	8002266 <LL_RCC_IsActiveFlag_PPRE2>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f1      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d043      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b18:	f7ff f997 	bl	8001e4a <LL_RCC_HSE_IsReady>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11e      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e066      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d106      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b2e:	f7ff fb28 	bl	8002182 <LL_RCC_PLL_IsReady>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d113      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e05b      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b44:	f7ff fa31 	bl	8001faa <LL_RCC_MSI_IsReady>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d108      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e050      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b52:	f7ff f9a7 	bl	8001ea4 <LL_RCC_HSI_IsReady>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e049      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fa6b 	bl	8002040 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6a:	f7fe f8db 	bl	8000d24 <HAL_GetTick>
 8002b6e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b72:	f7fe f8d7 	bl	8000d24 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e035      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b88:	f7ff fa6d 	bl	8002066 <LL_RCC_GetSysClkSource>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1ec      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_RCC_ClockConfig+0x23c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d21b      	bcs.n	8002bde <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_RCC_ClockConfig+0x23c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 0207 	bic.w	r2, r3, #7
 8002bae:	4913      	ldr	r1, [pc, #76]	; (8002bfc <HAL_RCC_ClockConfig+0x23c>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb6:	f7fe f8b5 	bl	8000d24 <HAL_GetTick>
 8002bba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bbe:	f7fe f8b1 	bl	8000d24 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e011      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_RCC_ClockConfig+0x23c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d1ef      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bde:	f000 f8b3 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <HAL_RCC_ClockConfig+0x240>)
 8002be6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_ClockConfig+0x244>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe f84d 	bl	8000c8c <HAL_InitTick>
 8002bf2:	4603      	mov	r3, r0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	58004000 	.word	0x58004000
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c16:	f7ff fa26 	bl	8002066 <LL_RCC_GetSysClkSource>
 8002c1a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c1c:	f7ff fae4 	bl	80021e8 <LL_RCC_PLL_GetMainSource>
 8002c20:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x2c>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d139      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d136      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002c34:	f7ff f9c9 	bl	8001fca <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d115      	bne.n	8002c6a <HAL_RCC_GetSysClockFreq+0x62>
 8002c3e:	f7ff f9c4 	bl	8001fca <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x4e>
 8002c48:	f7ff f9cf 	bl	8001fea <LL_RCC_MSI_GetRange>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	e005      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x5a>
 8002c56:	f7ff f9d3 	bl	8002000 <LL_RCC_MSI_GetRangeAfterStandby>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	4a36      	ldr	r2, [pc, #216]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x134>)
 8002c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c68:	e014      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x8c>
 8002c6a:	f7ff f9ae 	bl	8001fca <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_GetSysClockFreq+0x7a>
 8002c74:	f7ff f9b9 	bl	8001fea <LL_RCC_MSI_GetRange>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	e005      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x86>
 8002c82:	f7ff f9bd 	bl	8002000 <LL_RCC_MSI_GetRangeAfterStandby>
 8002c86:	4603      	mov	r3, r0
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x134>)
 8002c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c94:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d115      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ca0:	e012      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d102      	bne.n	8002cae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ca8:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e00c      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cb4:	f7ff f89c 	bl	8001df0 <LL_RCC_HSE_IsEnabledDiv2>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e001      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002cc6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc8:	f7ff f9cd 	bl	8002066 <LL_RCC_GetSysClkSource>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d12f      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002cd2:	f7ff fa89 	bl	80021e8 <LL_RCC_PLL_GetMainSource>
 8002cd6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0xde>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d003      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0xe4>
 8002ce4:	e00d      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ce8:	60fb      	str	r3, [r7, #12]
        break;
 8002cea:	e00d      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cec:	f7ff f880 	bl	8001df0 <LL_RCC_HSE_IsEnabledDiv2>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d102      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cf8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002cfa:	e005      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002cfe:	60fb      	str	r3, [r7, #12]
        break;
 8002d00:	e002      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	60fb      	str	r3, [r7, #12]
        break;
 8002d06:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d08:	f7ff fa4c 	bl	80021a4 <LL_RCC_PLL_GetN>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	fb03 f402 	mul.w	r4, r3, r2
 8002d14:	f7ff fa5d 	bl	80021d2 <LL_RCC_PLL_GetDivider>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d22:	f7ff fa4b 	bl	80021bc <LL_RCC_PLL_GetR>
 8002d26:	4603      	mov	r3, r0
 8002d28:	0f5b      	lsrs	r3, r3, #29
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d30:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d32:	697b      	ldr	r3, [r7, #20]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	08002fa0 	.word	0x08002fa0
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	01e84800 	.word	0x01e84800

08002d48 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b598      	push	{r3, r4, r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d4c:	f7ff ff5c 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002d50:	4604      	mov	r4, r0
 8002d52:	f7ff f9e2 	bl	800211a <LL_RCC_GetAHBPrescaler>
 8002d56:	4603      	mov	r3, r0
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <HAL_RCC_GetHCLKFreq+0x24>)
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd98      	pop	{r3, r4, r7, pc}
 8002d6c:	08002f60 	.word	0x08002f60

08002d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d86:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002d88:	f7ff f9d2 	bl	8002130 <LL_RCC_GetAHB3Prescaler>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0c9c      	lsrs	r4, r3, #18
 8002dac:	f7fe ffe6 	bl	8001d7c <HAL_PWREx_GetVoltageRange>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4619      	mov	r1, r3
 8002db4:	4620      	mov	r0, r4
 8002db6:	f000 f80b 	bl	8002dd0 <RCC_SetFlashLatency>
 8002dba:	4603      	mov	r3, r0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	08002fa0 	.word	0x08002fa0
 8002dc8:	08002f60 	.word	0x08002f60
 8002dcc:	431bde83 	.word	0x431bde83

08002dd0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08e      	sub	sp, #56	; 0x38
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002dda:	4a3a      	ldr	r2, [pc, #232]	; (8002ec4 <RCC_SetFlashLatency+0xf4>)
 8002ddc:	f107 0320 	add.w	r3, r7, #32
 8002de0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002de4:	6018      	str	r0, [r3, #0]
 8002de6:	3304      	adds	r3, #4
 8002de8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002dea:	4a37      	ldr	r2, [pc, #220]	; (8002ec8 <RCC_SetFlashLatency+0xf8>)
 8002dec:	f107 0318 	add.w	r3, r7, #24
 8002df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002df4:	6018      	str	r0, [r3, #0]
 8002df6:	3304      	adds	r3, #4
 8002df8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002dfa:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <RCC_SetFlashLatency+0xfc>)
 8002dfc:	f107 030c 	add.w	r3, r7, #12
 8002e00:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e02:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e06:	2300      	movs	r3, #0
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e10:	d11b      	bne.n	8002e4a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
 8002e16:	e014      	b.n	8002e42 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	3338      	adds	r3, #56	; 0x38
 8002e1e:	443b      	add	r3, r7
 8002e20:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002e24:	461a      	mov	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d807      	bhi.n	8002e3c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	3338      	adds	r3, #56	; 0x38
 8002e32:	443b      	add	r3, r7
 8002e34:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e3a:	e021      	b.n	8002e80 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	3301      	adds	r3, #1
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d9e7      	bls.n	8002e18 <RCC_SetFlashLatency+0x48>
 8002e48:	e01a      	b.n	8002e80 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4e:	e014      	b.n	8002e7a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	3338      	adds	r3, #56	; 0x38
 8002e56:	443b      	add	r3, r7
 8002e58:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d807      	bhi.n	8002e74 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	3338      	adds	r3, #56	; 0x38
 8002e6a:	443b      	add	r3, r7
 8002e6c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e72:	e005      	b.n	8002e80 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	3301      	adds	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d9e7      	bls.n	8002e50 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <RCC_SetFlashLatency+0x100>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 0207 	bic.w	r2, r3, #7
 8002e88:	4911      	ldr	r1, [pc, #68]	; (8002ed0 <RCC_SetFlashLatency+0x100>)
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e90:	f7fd ff48 	bl	8000d24 <HAL_GetTick>
 8002e94:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e96:	e008      	b.n	8002eaa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e98:	f7fd ff44 	bl	8000d24 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e007      	b.n	8002eba <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <RCC_SetFlashLatency+0x100>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1ef      	bne.n	8002e98 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3738      	adds	r7, #56	; 0x38
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	08002f44 	.word	0x08002f44
 8002ec8:	08002f4c 	.word	0x08002f4c
 8002ecc:	08002f54 	.word	0x08002f54
 8002ed0:	58004000 	.word	0x58004000

08002ed4 <__libc_init_array>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	4d0d      	ldr	r5, [pc, #52]	; (8002f0c <__libc_init_array+0x38>)
 8002ed8:	4c0d      	ldr	r4, [pc, #52]	; (8002f10 <__libc_init_array+0x3c>)
 8002eda:	1b64      	subs	r4, r4, r5
 8002edc:	10a4      	asrs	r4, r4, #2
 8002ede:	2600      	movs	r6, #0
 8002ee0:	42a6      	cmp	r6, r4
 8002ee2:	d109      	bne.n	8002ef8 <__libc_init_array+0x24>
 8002ee4:	4d0b      	ldr	r5, [pc, #44]	; (8002f14 <__libc_init_array+0x40>)
 8002ee6:	4c0c      	ldr	r4, [pc, #48]	; (8002f18 <__libc_init_array+0x44>)
 8002ee8:	f000 f820 	bl	8002f2c <_init>
 8002eec:	1b64      	subs	r4, r4, r5
 8002eee:	10a4      	asrs	r4, r4, #2
 8002ef0:	2600      	movs	r6, #0
 8002ef2:	42a6      	cmp	r6, r4
 8002ef4:	d105      	bne.n	8002f02 <__libc_init_array+0x2e>
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
 8002ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efc:	4798      	blx	r3
 8002efe:	3601      	adds	r6, #1
 8002f00:	e7ee      	b.n	8002ee0 <__libc_init_array+0xc>
 8002f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f06:	4798      	blx	r3
 8002f08:	3601      	adds	r6, #1
 8002f0a:	e7f2      	b.n	8002ef2 <__libc_init_array+0x1e>
 8002f0c:	08002fe0 	.word	0x08002fe0
 8002f10:	08002fe0 	.word	0x08002fe0
 8002f14:	08002fe0 	.word	0x08002fe0
 8002f18:	08002fe4 	.word	0x08002fe4

08002f1c <memset>:
 8002f1c:	4402      	add	r2, r0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d100      	bne.n	8002f26 <memset+0xa>
 8002f24:	4770      	bx	lr
 8002f26:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2a:	e7f9      	b.n	8002f20 <memset+0x4>

08002f2c <_init>:
 8002f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2e:	bf00      	nop
 8002f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f32:	bc08      	pop	{r3}
 8002f34:	469e      	mov	lr, r3
 8002f36:	4770      	bx	lr

08002f38 <_fini>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	bf00      	nop
 8002f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3e:	bc08      	pop	{r3}
 8002f40:	469e      	mov	lr, r3
 8002f42:	4770      	bx	lr
